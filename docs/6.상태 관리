# 상태 관리

## 목차

1. [컴포넌트 상태 관리](#컴포넌트-상태-관리)
2. [전역 상태 관리](#전역-상태-관리)

## 컴포넌트 상태 관리

컴포넌트 내부에서 상태를 관리합니다. 주로 `useState` 훅을 사용하여 상태를 선언하고, 상태 변화를 반영하여 UI를 업데이트합니다.

**예제:**

```jsx
import React, { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default Counter;
```

## 전역 상태 관리

애플리케이션 전체에서 상태를 관리합니다. 전역 상태 관리 라이브러리를 사용하여 여러 컴포넌트 간에 상태를 공유하고 관리할 수 있습니다.

### Redux

상태 관리를 위한 예측 가능한 상태 컨테이너입니다. 액션과 리듀서를 통해 상태를 업데이트하고, 단일 스토어에서 애플리케이션의 전체 상태를 관리합니다.

**예제:**

```jsx
// actions.js
export const increment = () => ({
  type: 'INCREMENT'
});

// reducer.js
const initialState = { count: 0 };

function counterReducer(state = initialState, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    default:
      return state;
  }
}

export default counterReducer;

// store.js
import { createStore } from 'redux';
import counterReducer from './reducer';

const store = createStore(counterReducer);
export default store;

// App.js
import React from 'react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import store from './store';
import { increment } from './actions';

function Counter() {
  const count = useSelector((state) => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => dispatch(increment())}>Increment</button>
    </div>
  );
}

function App() {
  return (
    <Provider store={store}>
      <Counter />
    </Provider>
  );
}

export default App;
```

### MobX

반응형 상태 관리 라이브러리입니다. 상태가 변경될 때 자동으로 관련된 컴포넌트가 업데이트됩니다.
**예제:**

```jsx
import React from "react";
import { observable } from "mobx";
import { observer } from "mobx-react-lite";

const counterState = observable({
  count: 0,
  increment() {
    this.count++;
  },
});

const Counter = observer(() => (
  <div>
    <p>Count: {counterState.count}</p>
    <button onClick={() => counterState.increment()}>Increment</button>
  </div>
));

export default Counter;
```

### Context API

리액트의 내장 전역 상태 관리 도구입니다. 프로바이더와 컨슈머 패턴을 사용하여 트리 전체에 상태를 전달할 수 있습니다.
**예제:**

```jsx
import React, { createContext, useContext, useState } from "react";

const CountContext = createContext();

function Counter() {
  const { count, increment } = useContext(CountContext);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

function CountProvider({ children }) {
  const [count, setCount] = useState(0);
  const increment = () => setCount(count + 1);

  return (
    <CountContext.Provider value={{ count, increment }}>
      {children}
    </CountContext.Provider>
  );
}

function App() {
  return (
    <CountProvider>
      <Counter />
    </CountProvider>
  );
}

export default App;
```

### Recoil

React를 위한 상태 관리 라이브러리입니다. Atom과 Selector를 사용하여 상태를 관리하고, 컴포넌트 간의 상태 공유를 쉽게 합니다.
**예제:**

```jsx
import React from "react";
import { RecoilRoot, atom, useRecoilState } from "recoil";

const countState = atom({
  key: "countState",
  default: 0,
});

function Counter() {
  const [count, setCount] = useRecoilState(countState);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

function App() {
  return (
    <RecoilRoot>
      <Counter />
    </RecoilRoot>
  );
}

export default App;
```

### Zustand

가벼운 상태 관리 라이브러리입니다. 작은 코드로 쉽게 상태를 관리할 수 있습니다.
**예제:**

```jsx
import React from "react";
import create from "zustand";

const useStore = create((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
}));

function Counter() {
  const { count, increment } = useStore();

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

export default Counter;
```
